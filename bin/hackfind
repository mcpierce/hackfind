#!/usr/bin/env python
#
# Copyright (C) 2016 Darryl L. Pierce <mcpierce@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from __future__ import print_function

import getopt, sys
from hackfind import Model, Report, Template
from datetime import timedelta, datetime, date, time
from time import mktime

def usage(message):
    if message is not None:
        print(message)
    print("USAGE: hackfind -i INFILE OPTIONS\n")
    print("  INFILE  - the router log file")
    print("\nOPTIONS:")
    print("  -a, --allports         include all ports")
    print("  -e, --earliest         the earliest date to include")
    print("  -l, --latest           the latest date to include")
    print("  -j, --today            show only entries for today")
    print("  -y, --yesterday        show only entries for yesterday")
    print("  -p, --port=[PORT]      include attempts that target PORT")
    print("  -t, --template=[FILE]  runs the provided template")
    print("  -h, --help             show this help information")
    print("")
    print("DATES must be in the format MM-DD-YYYY")

ifile = ""
template_name = ""
include_ports = []
earliest_date = None
latest_date = None

DATE_MASK = "%m-%d-%Y"

try:
    opts, args = getopt.getopt(sys.argv[1:], "ai:e:l:jyo:t:p:h",
                               [
                                   "allports",
                                   "earliest=",
                                   "latest=",
                                   "today",
                                   "yesterday",
                                   "input=",
                                   "output=",
                                   "port=",
                                   "template=",
                                   "help"
                               ])
except getopt.GetoptError as err:
    print(str(err))
    usage()
    sys.exit(2)

for o, a in opts:
    if o in ("-a", "--allports"):
        include_ports = range(0, 65535)
    elif o in ("-h", "--help"):
        usage("")
        sys.exit(0)
    elif o in ("-i", "--input"):
        ifile = a
    elif o in ("-e", "--earliest"):
        parsed = datetime.strptime(a, DATE_MASK)
        earliest_date = mktime(datetime.combine(parsed, time(0, 0, 0)).timetuple())
    elif o in ("-l", "--latest"):
        parsed = datetime.strptime(a, DATE_MASK)
        latest_date = mktime(datetime.combine(parsed, time(23, 59, 59)).timetuple())
    elif o in ("-j", "--today"):
        if earliest_date is not None or latest_date is not None:
            usage("Cannot use --earliest, --latest or --yesterday and --today")
        earliest_date = mktime(datetime.combine(datetime.today(), time(0, 0, 0)).timetuple())
        latest_date = mktime(datetime.combine(datetime.today(), time(23, 59, 59)).timetuple())
    elif o in ("-y", "--yesterday"):
        if earliest_date is not None or latest_date is not None:
            usage("Cannot use --earliest, --latest or --today and --yesterday")
        earliest_date = mktime(datetime.combine(datetime.today() - timedelta(days = 1),
                                                time(0, 0, 0)).timetuple())
        latest_date = mktime(datetime.combine(datetime.today() - timedelta(days = 1),
                                              time(23, 59, 59)).timetuple())
    elif o in ("-p", "--port"):
        include_ports.append(int(a))
    elif o in ("-t", "--template"):
        template_name = a
    else:
        assert False, "invalid option: %s" % o

# if no port was specified, then assume only SSH
if len(include_ports) == 0:
    include_ports.append(22)

if len(ifile) == 0:
    usage("missing or invalid filename: %s" % ifile)

# if date ranges are specified, make sure they aren't inverted
if earliest_date is not None and latest_date is not None:
    if latest_date < earliest_date:
        usage("Latest time cannot come before earliest time")

model = Model(ifile)
model.set_included_ports(include_ports)
if earliest_date is not None:
    model.earliest_date = earliest_date
if latest_date is not None:
    model.latest_date = latest_date
model.process_input()

if len(template_name) > 0:
    template = Template(template_name, model)
    template.generate()
