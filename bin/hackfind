#!/usr/bin/env python
#
# Copyright (C) 2016 Darryl L. Pierce <mcpierce@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from __future__ import print_function

import getopt, sys
from hackfind import Model, Report, Template

def usage(message):
    if message is not None:
        print(message)
    print("USAGE: hackfind -i INFILE OPTIONS\n")
    print("  INFILE  - the router log file")
    print("\nOPTIONS:")
    print("  -a, --allports         include all ports")
    print("  -p, --port=[PORT]      include attempts that target PORT")
    print("  -t, --template=[FILE]  runs the provided template")
    print("  -h, --help             show this help information")

ifile = ""
template_name = ""
include_ports = []

try:
    opts, args = getopt.getopt(sys.argv[1:], "ai:o:t:p:h",
                               [
                                   "allports",
                                   "input=",
                                   "output=",
                                   "port=",
                                   "template=",
                                   "help"
                               ])
except getopt.GetoptError as err:
    print(str(err))
    usage()
    sys.exit(2)

for o, a in opts:
    if o in ("-a", "--allports"):
        include_ports = range(0, 65535)
    elif o in ("-h", "--help"):
        usage()
        sys.exit(0)
    elif o in ("-i", "--input"):
        ifile = a
    elif o in ("-p", "--port"):
        include_ports.append(int(a))
    elif o in ("-t", "--template"):
        template_name = a
    else:
        assert False, "invalid option: %s" % o

# if no port was specified, then assume only SSH
if len(include_ports) == 0:
    include_ports.append(22)

if len(ifile) == 0:
    usage("missing or invalid filename: %s" % ifile)

model = Model(ifile)
model.set_included_ports(include_ports)
model.process_input()

if len(template_name) > 0:
    template = Template(template_name, model)
    template.generate()
